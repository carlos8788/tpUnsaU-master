
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Scrollbar, ttk, Button, PhotoImage, messagebox, Label
from model import producto, usuario, carrito, administrador
from views import v_agregar_producto, v_editar_producto, v_editar_usuario

class VistaAdministrador:
    def __init__(self, admin_name):
        # print(admin_name)
        self.admin_name = admin_name                
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"assets_admin\frame0")

        self.producto = producto.Producto(None, None, None, None, None)
        self.carrito = carrito.Carrito(None, None)
        self.usuario = usuario.Usuario(None, None, None, None, None)
        self.admin = administrador.Administrador()
        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)


        self.window = Tk()

        self.window.geometry("850x642")
        self.window.configure(bg = "#FFFFFF")
 

        self.usuario_name = f"Bienvenid@ {self.admin_name}"
        self.titulo = Label(self.window, text=self.usuario_name, font=("Inter", 20 * -1),bg = "#FFFFFF")
        self.titulo.place(
            x=325,
            y=12,
            # 
        )

        self.tabla_producto = ttk.Treeview(self.window,
                                  columns=('col1', 'col2', 'col3', 'col4', 'col5'))


        self.tabla_producto.place(
            x=26,
            y=44,
            width=614.0,
            height=169.0
        )
        self.tabla_producto.column('#0', width=15)
        self.tabla_producto.column('col1', width=75)
        self.tabla_producto.column('col2', width=15)
        self.tabla_producto.column('col3', width=20)
        self.tabla_producto.column('col4', width=40)
        self.tabla_producto.column('col5', width=75)

        self.tabla_producto.heading('#0', text='ID_PRODUCTO')
        self.tabla_producto.heading('col1', text='NOMBRE')
        self.tabla_producto.heading('col2', text='STOCK')
        self.tabla_producto.heading('col3', text='PRECIO')
        self.tabla_producto.heading('col4', text='CATEGORIA')
        self.tabla_producto.heading('col5', text='DESCRIPCIÓN')

        self.barra_productos = Scrollbar(self.window, orient='vertical',
                               command=self.tabla_producto.yview)
        
        self.barra_productos.place(
            x=622.5,
            y=44,
            bordermode='inside',
            height=169

        )

        self.tabla_producto.config(yscrollcommand=self.barra_productos.set)
        self.producto.get_products_admin(self.tabla_producto)

        self.tabla_producto.bind("<<TreeviewSelect>>", self.on_tree_select)


        self.tabla_usuario = ttk.Treeview(self.window,
                                  columns=('col1', 'col2', 'col3', 'col4', 'col5'))


        self.tabla_usuario.place(
            x=26,
            y=236,
            width=614.0,
            height=169.0
        )
        self.tabla_usuario.column('#0', width=10)
        self.tabla_usuario.column('col1', width=40)
        self.tabla_usuario.column('col2', width=40)
        self.tabla_usuario.column('col3', width=50)
        self.tabla_usuario.column('col4', width=40)
        self.tabla_usuario.column('col5', width=10)

        self.tabla_usuario.heading('#0', text='ID_USUARIO')
        self.tabla_usuario.heading('col1', text='USUARIO')
        self.tabla_usuario.heading('col2', text='PASSWORD')
        self.tabla_usuario.heading('col3', text='CORREO')
        self.tabla_usuario.heading('col4', text='DIRECCION')
        self.tabla_usuario.heading('col5', text='ADMIN')

        self.barra_usuarios = Scrollbar(self.window, orient='vertical',
                               command=self.tabla_usuario.yview)
        
        self.barra_usuarios.place(
            x=622.5,
            y=236,
            bordermode='inside',
            height=169

        )

        self.tabla_usuario.config(yscrollcommand=self.barra_usuarios.set)
        self.usuario.usuarios(self.tabla_usuario)
        self.tabla_usuario.bind("<<TreeviewSelect>>", self.edit_user)
        


        self.tabla_carrito = ttk.Treeview(self.window,
                                  columns=('col1', 'col2', 'col3', 'col4', 'col5'))


        self.tabla_carrito.place(
            x=26,
            y=428,
            width=614.0,
            height=169.0
        )
        self.tabla_carrito.column('#0', width=15)
        self.tabla_carrito.column('col1', width=60)
        self.tabla_carrito.column('col2', width=100)
        self.tabla_carrito.column('col3', width=40)
        self.tabla_carrito.column('col4', width=60)
        self.tabla_carrito.column('col5', width=150)

        self.tabla_carrito.heading('#0', text='ID_CARRITO')
        self.tabla_carrito.heading('col1', text='USUARIO')
        self.tabla_carrito.heading('col2', text='DIRECCION')
        self.tabla_carrito.heading('col3', text='TOTAL')
        self.tabla_carrito.heading('col4', text='CANTIDAD')
        self.tabla_carrito.heading('col5', text='FECHA')

        self.barra_carrito = Scrollbar(self.window, orient='vertical',
                               command=self.tabla_carrito.yview)
        
        self.barra_carrito.place(
            x=622.5,
            y=428,
            bordermode='inside',
            height=169

        )

        self.tabla_carrito.config(yscrollcommand=self.barra_carrito.set)
        self.carrito.get_carrito(self.tabla_carrito)
        self.tabla_carrito.bind("<<TreeviewSelect>>", self.carrito_seleccionado)
        
        

        button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.delete_carrito(),
            relief="flat"
        )
        button_1.place(
            x=660.0,
            y=498.0,
            width=141.0,
            height=29.0
        )

        button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.delete_user(),
            relief="flat"
        )
        button_2.place(
            x=660.0,
            y=329.0,
            width=141.0,
            height=29.0
        )

        button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        edit_usuario = Button(
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.crear_vista_edit_usuario(),
            relief="flat"
        )
        edit_usuario.place(
            x=660.0,
            y=284.0,
            width=141.0,
            height=29.0
        )

        button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_4 = Button(
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.eliminar(),
            relief="flat"
        )
        button_4.place(
            x=660.0,
            y=159.0,
            width=141.0,
            height=29.0
        )

        button_image_5 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        self.boton_editar_producto = Button(
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.crear_vista(),
            relief="flat"
            )
            
            
        
        self.boton_editar_producto.place(
            x=660.0,
            y=114.0,
            width=141.0,
            height=29.0
        )

        button_image_6 = PhotoImage(
            file=relative_to_assets("button_6.png"))
        self.button_agregar_producto = Button(
            image=button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: v_agregar_producto.AgregarProducto(self.window, self.tabla_producto),
            relief="flat"
        )
        self.button_agregar_producto.place(
            x=660.0,
            y=69.0,
            width=141.0,
            height=29.0
        )
        self.window.resizable(False, False)
        self.window.mainloop()


    def on_tree_select(self, tabla):
        self.current_item = self.tabla_producto.focus()

        data = self.tabla_producto.item(self.current_item)

        lista = data['values']
        try:
            lista.insert(0, data['text'])
        except:
            pass
        return lista
        
 
    def crear_vista(self):
        lista = self.on_tree_select(None)
        
        if lista == "":
            return messagebox.showerror("Error", "No seleccionó ningún producto")
        return v_editar_producto.EditarProducto(
                    self.window, 
                    self.tabla_producto,
                    lista)
    
    def eliminar(self):
        lista = self.on_tree_select(None)
        if lista == "":
            return messagebox.showerror("Error", "No seleccionó ningún producto")
        return self.admin.eliminar_producto(self.tabla_producto, lista[0])


    def edit_user(self, tabla):
        self.current_item = self.tabla_usuario.focus()
        data = self.tabla_usuario.item(self.current_item)

        lista = data['values']
        try:
            lista.insert(0, data['text'])
        except:
            pass
        return lista
    
    def crear_vista_edit_usuario(self):
        lista = self.edit_user(None)
        
        if lista == "":
            return messagebox.showerror("Error", "No seleccionó ningún usuario")
        return v_editar_usuario.EditarUsuario(
                    self.window, 
                    self.tabla_usuario,
                    lista)
    
    def delete_user(self):
        lista = self.edit_user(None)
        if lista == "":
            return messagebox.showerror("Error", "No seleccionó ningún usuario")
        return self.admin.eliminar_usuario(self.tabla_usuario, lista[0])
    
    def edit_user(self, tabla):
        self.current_item = self.tabla_usuario.focus()

        data = self.tabla_usuario.item(self.current_item)

        lista = data['values']
        try:
            lista.insert(0, data['text'])
        except:
            pass
        return lista
    
    def carrito_seleccionado(self, tabla):
        self.current_item = self.tabla_carrito.focus()

        data = self.tabla_carrito.item(self.current_item)

        lista = data['values']
        try:
            lista.insert(0, data['text'])
        except:
            pass
        return lista
    
    def delete_carrito(self):
        lista = self.carrito_seleccionado(None)
        if lista == "":
            return messagebox.showerror("Error", "No seleccionó ningún carrito")
        return self.admin.eliminar_carrito(self.tabla_carrito, lista[0])
    
